<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Tiger Forest]]></title>
  <subtitle><![CDATA[Nowhere else that I belong than here with you]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://tigerforest.github.io//"/>
  <updated>2016-01-14T11:33:25.000Z</updated>
  <id>http://tigerforest.github.io//</id>
  
  <author>
    <name><![CDATA[Tigerforest]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[感谢支持]]></title>
    <link href="http://tigerforest.github.io/2016/01/14/mySite/"/>
    <id>http://tigerforest.github.io/2016/01/14/mySite/</id>
    <published>2016-01-14T11:28:45.000Z</published>
    <updated>2016-01-14T11:33:25.000Z</updated>
    <content type="html"><![CDATA[<h2 id="占位文章">占位文章</h2><p>本站正在持续优化中，感谢 疯狂的大叔。</p>
]]></content>
    <summary type="html">
    <![CDATA[感谢]]>
    
    </summary>
    
      <category term="日志" scheme="http://tigerforest.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="日志" scheme="http://tigerforest.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的英国旅行]]></title>
    <link href="http://tigerforest.github.io/2015/09/03/UKTravel/"/>
    <id>http://tigerforest.github.io/2015/09/03/UKTravel/</id>
    <published>2015-09-02T16:49:00.000Z</published>
    <updated>2015-12-09T02:47:52.000Z</updated>
    <content type="html"><![CDATA[<p>时间是2015年8月24日至9月1日，我开启了一段去英国的自助旅程。旅行过程中感受深刻，唯一的不足是我不懂英语，听不懂，看不太懂，发音不准。旅行途中拍了一些照片，能看的都统一放到我的 <a href="http://photo.weibo.com/2200504514/albums/detail/album_id/3883344290019022?from=profile_wb&amp;pos=1#!/mode/1/page/1" target="_blank" rel="external">微博相册</a> 了。</p>
<p>回来后，有小伙伴说非常想知道我不懂英语又是怎么独自一个人在外面解决吃穿住行的，我本意也是会写这样一篇文章的，这次我就多啰嗦些。回想起来有些丢人了，丢就丢吧。在当时我就是这么想的，反正没人认识我，我怕谁啊，总算把事情给做好，这确实是真实的我。</p>
<p>这篇文章本是想写的更有人情味。<br><a id="more"></a></p>
<h2 id="出发前的准备">出发前的准备</h2><h3 id="需要携带的物品">需要携带的物品</h3><p>我给自己列了一个行李物品清单，收拾的时候直接对着清单往包里和箱子里塞就完事。主要是这些：</p>
<ul>
<li>洗刷用品、换洗衣物、雨伞</li>
<li>手机、钱包、护照（记得办一张 VISA 或 MasterCard 的全币种信用卡，我用的招行 VISA 全币种卡升临时额度到2W）</li>
<li>护照首页和签证页、机票行程单和住宿预定单的复印件（看网上说可能会有用，实际没用上）</li>
<li>350镑现金（我提前从银行兑换的，没有用完）</li>
<li>移动手机号码不变，开通国际漫游（手机拨回国方式：手机号前面 +0086 即可）</li>
</ul>
<h3 id="行程准备">行程准备</h3><p>我首先在 Google 地图上给自己列出来了很多想去的景点，然后我使用行走的方式串路线，这样路线会比较清晰，事实上我确实都是用走的。</p>
<p>总共就列了2天行程，一条大本钟路线，一条伦敦塔桥路线，后面不再做了。因为我在网上关注了伦敦的天气，天气预报说会持续下雨一周，到时都不知道下雨是否能出去呢。实际天气情况很好，不要看了天气预报就全信了。</p>
<h3 id="其他准备">其他准备</h3><p>事先办好签证这是最重要的前提准备。签证到手后，我就私下和领导沟通请假事宜，后面再走请假流程。隔天即定下出发时间，买好机票订好住宿。我为什么会选择周一去和周一回呢？就因为周一的机票比其他时间更便宜，这个是我旅行中最贵的一笔开支。住宿在 Airbnb 上面订的房间，英国邮编为 <code>NW1 3SH</code>。其实根据 <a href="http://www.honglingjin.co.uk/37991.html" target="_blank" rel="external">英国邮编</a> 就可以大致找到地址方位，感兴趣的可以给自己普及一下英国邮编知识。这个地方靠近摄政公园，走路去大本钟也就40分钟，事后发现很值。后面我还订了伦敦希思罗机场的接机服务，考虑到飞机到达已经下午6点多了，不想耽搁到太晚。</p>
<p>出发前我联系了我的房东，他人非常热心。他叫 Sabina ，罗马尼亚人，在英国巴斯大学拿到了工商管理硕士学位。他给我列出了房间里他为我准备的东西，还问我是否需要额外的其他东西，他也可以帮我准备好。我就告诉他我不会英语，无法使用英语交流，我还需要另外5个衣架晾衣服。他回我消息说不用担心，我可以在伦敦莱斯特广场附近找到很多中国人，那里有唐人街，并且他有很多衣架可以给我用。后来我确实去了那里，那一片都是中国餐馆和商店，餐馆菜单上价格都好贵，这个应该是和英国物价相关。后面我还问了他好多问题，包括伦敦夜晚的情况，晚上几点回家比较好，去餐厅吃饭小费怎么给，是否有其他推荐的。他说在伦敦晚上有些地方不安全尤其是一个人的时候，但是市中心是很安全的，因为市中心人非常多。推荐我凌晨1-2点回家，我当时懵了，后来到了才知道伦敦晚上8点钟，太阳才落下天还亮着的。告诉我小费一般给账单的10%，有些餐厅已经直接包含小费的不用另给，他说他自己从来没主动给过小费。后来我把我的163邮箱地址发给他了，他回我了一封邮件，给我推荐了好多地方，有网上链接还带了一些他自己的描述信息，真是太棒了。他告诉我当我到达伦敦时，他已经回罗马尼亚了，他的室友是一对意大利夫妇和一对西班牙姐妹。他会托付他的室友将房间钥匙转交给我。然后我又问了他一些更具体的信息，确认房间位置，WIFI 密码等，他都耐心告诉我。他说在到达指定地址后从大门呼叫他的室友开门，然后坐电梯到3楼，找到46号，他的房间是右边3间房的最后一间，还有房间 WIFI 名是以 VM 开头，以 2G 结尾的，并回复了密码。简直太赞了。</p>
<p>上面的交流我都是使用 Google 翻译完成的。入住信息已经非常清楚了，需要我自己完成的真的不多。Sabina 人太好了，后来我发现我告诉他我不会英语是很不错的选择。因为他也告诉了他的室友我的一些情况，这样我和他的室友接触时不会显得没礼貌。</p>
<p>另外，还搜到了伦敦中国大使馆的信息，伦敦公交卡信息（考虑买牡蛎卡，后来没买直接省钱了），<a href="http://www.tfl.gov.uk/modes/cycling/" target="_blank" rel="external">伦敦自行车租赁</a>，<a href="http://www.bangli.uk/9886.html" target="_blank" rel="external">入境卡填写信息</a>，<a href="http://site.douban.com/143903/widget/notes/7032297/note/378886831/" target="_blank" rel="external">英国人这样说英语</a>。</p>
<h2 id="细说旅行">细说旅行</h2><p>我在英国游玩的时间是25号至30号6天。因为英国时差比中国慢7小时，所以24号直飞航班当天下午6点就可以到达伦敦希思罗机场，回国是31号下午3点15分的直飞航班9月1日上午9点多到达上海浦东，飞行时间大约都是12个小时多一点。</p>
<h3 id="初到伦敦">初到伦敦</h3><p>24号当日因为上海下雨中国东方航空晚点2个小时，我立即联系了 Sabina 和 接机师傅陈先生。我收到消息都很赞，Sabina 说他的室友会一直在家等我，陈先生也说会一直等我，都让我放心。可那些要在伦敦希思罗机场转机的乘客就没那么幸运了。</p>
<p>到达伦敦希思罗机场的时间为晚上8点多，接着过海关领行李。过海关时真是听不懂，我总共说了3个单词，<code>Travel</code> 和 <code>One week</code>，然后竖立了一下食指，代表我是一个人来的。因为过海关常问问题在网上看过了，一般都会问出行目的和停留时间的。不过后面又问了我一些，我实在听不懂，啊了几下之后，工作人员没办法就给我敲章让我通过了。后来回想起来应该是问了我父母的情况，因为我听到了父母那个单词，只是当时没有反应过来。后面赶紧联系上了陈先生，上了他的车，直奔住宿地址。如果没订接机，我还不知道自己要折腾到什么时候。</p>
<p>在车上和陈师傅简单聊了一下，他是山东大连人，目前一个人在伦敦，以前家人一起在伦敦生活过的，离过婚。当我告诉他我是程序员时，他说我接不接私单，他想要做一个网站。哈哈，没办法我说我页面那块做不来接不了单。实际上我确实是写后端程序的，前端我也会一些，但是切图、CSS + DIV 布局那块不在行。然后还聊了一些关于我行程的一些事情。当到达住宿地点时已经快晚上10点了，他先下车帮我确认了地点，并从大门呼叫了 Sabina 的室友，他用英语帮我问的。我根本什么都没做，和陈先生告别后，乘电梯直接上3楼，3楼电梯门一开我就听到有人在说 <code>Hello</code> 了，是 Sabina 的意大利室友。她说的英语我确实听懂了，问我是不是不会说英语，我说是的。然后详细给我介绍每把钥匙是开哪扇门的，并用手指向钥匙可以开的那扇门，在我连说了一堆 <code>OK</code>，并确实确定我听懂了后才将钥匙交给我。整个过程我都听明白了，真的很棒。然后我就进房间给家人打电话报平安，真是开心的不得了。</p>
<p>12个多小时的飞机，感觉就是坐了一天没动，还连吃了好几顿饭，肚子都有点不舒服，当天到达伦敦后就没再吃东西了。</p>
<h3 id="伦敦第一天">伦敦第一天</h3><p>第一天我5点多就起床了，时差睡不着。洗个澡等到了7点多呆不住了，直接顺着自己准备的大本钟路线走。一路使用 Google 地图导航，太好用了。路上行人很少，车也不多，重要的是没下雨啊。早餐我在伦敦乐购超市买了3件套，1瓶饮料，1盒水果，1份沙拉，花了6镑多。后来我基本都是在吃3件套，只是有时将沙拉换成面包，还真吃习惯了。走过大本钟下面，坐在伦敦眼对面泰晤士边的椅子上吃完了第一顿早餐。后面路线就是伦敦眼，大本钟，然后一直沿着泰晤士河边走，到了伦敦塔。</p>
<p>伦敦塔入口排了好长的队伍，就没打算去参观了。到吃饭的时间，想吃肉，我大着胆子进了 <code>KFC</code> 的门。紧张的和前台说了一句英语，</p>
<blockquote>
<p>May I have the menu please?</p>
</blockquote>
<p>我从这里学的 <a href="http://site.douban.com/143903/widget/notes/7032297/note/378886831/" target="_blank" rel="external">英国人这样说英语</a>。她开始没反应过来，然后我又说了一次菜单的单词，她才指了指她身后墙上那个菜单。完了我以为国外的 <code>KFC</code> 会和国内一样的，前台会有单独的菜单和图片可以直接点餐的。看了半天一个都读不出口，想转身走，腿又不听使唤。豁出去了反正没人认识我，我指着她身后墙上图片的第二排第一个说，</p>
<blockquote>
<p>The first one please.</p>
</blockquote>
<p>这次她懂了，她还自己手指点了一下我指的物品跟我确认，然问我是否需要喝的，喝的单词我听明白了，我连连摇头表示不需要。等下又让我看菜单点喝什么，可麻烦了。而且我早上花了1镑多买的水酸的要命还没喝完，可以将就着喝。最后买了一个3镑多的汉堡，开心的啃完，饱了。</p>
<p>直奔伦敦塔桥，买好票上去参观。买票我使用的英语是：</p>
<blockquote>
<p>One ticket please.</p>
</blockquote>
<p>很简单，我就买到了，一张成人票价格9镑。乘电梯到达塔桥上面后会有一场影视趣味话剧，说一些和塔桥相关的东西，英语的听不懂，我是看图片的。之后塔桥上面视野宽阔，护栏上面展示了塔桥建筑的相关历史信息，中间桥面是玻璃的可以直接看到桥下，好多人站上面拍照。其他就没什么了，下桥后我走到了摘星塔（The Shard），然后去了博罗市场。之后就又一直走到了伦敦眼，过桥，经过大本钟，本来是想直接往家里走的，结果走错路了。走到了圣詹姆斯公园，后面接着又走到了 M&amp;M’s World，花8镑26便士买了一袋巧克力。实在走不动了，就找地方吃饭想坐下休息一会儿。这次我走进了必胜客的大门，吃大饼。这次的菜单不错，有图片，哈哈，服务员过来后我直接顺利点餐。然后她用英语说了几句话，并给我了一个干净的空盘子，指了一下另一边，我不懂装懂后她走了。我只是稍微明白了一些，意思好像是可以自己用盘子去那边自助取一些东西吃。我半天没动，看了下旁边餐桌的，都拿着盘子去了，然后我大着胆子也去了。抓了一些黄瓜片，胡萝卜之类的过来吃。披萨上来后我很快吃了2块，剩下的吃了好半天，太撑了，最后还剩一小块实在吃不完，花了13镑85便士。</p>
<h3 id="伦敦第二天和第三天">伦敦第二天和第三天</h3><p>第二天一大早我给室友留了1张纸条就出去了，大概的意思就是表示感谢和我在伦敦的时间安排等，如果让我自己说英语我实在做不到，昨天买的巧克力也全部留给他们了。</p>
<p>第三天早上我先去了一趟 St Pancras International 火车站，买第四天去布莱顿的往返火车票。因为我的住宿全部事先订在了伦敦，太远的地方不想去，只考虑当天往返。在家就早早做了准备，本来是想在网上买的，发现 Safari 浏览器无法加载招行信用卡的授权验证码输入框控件后没买成。我带了 MAC，结果只是徒增行李，并没有怎么使用，有 pad 就够了。然后我用 pad 拍下了英国火车票官网从 St Pancras International 去布莱顿的火车票信息，就直奔火车站了。首先尝试从机器上面买，发现无法指定日期，只能买当日的，所以这次我又大着胆子去人工柜台买票了。我首先把我的 pad 递了过去，然后手指上面的车次信息，用英语说：</p>
<blockquote>
<p>May I have this ticket please?</p>
</blockquote>
<p>然后她就知道我要去哪里，接着就跟我确认出发的具体时间点和是否往返等信息都比较简单了，不懂的就还是指一下 pad 上面了，很快就买好了伦敦到布莱顿的往返火车票，现金24镑70便士。</p>
<p>两天时间我走过了很多地方，摄政公园、伦敦大学、大英博物馆、圣保罗教堂、伦敦运输博物馆、特拉法加广场、唐宁街10号、大本钟、伦敦眼摩天轮、海德公园、白金汉宫、维多利亚和阿尔伯特博物馆、自然历史博物馆、哈洛德百货等地方。全部都是走过去的，公园和好多地方都有长凳的，走累了就坐下休息一会。我应该可以说伦敦被我走了个遍吧，最有名气的地方基本我都走过去了。然后吃遍了伦敦各有名的快餐店，Pret、EAT.、Itsu等遍地都有的店我都去过，进去自己挑选吃的，然后买单。我都不再怎么紧张了，因为没人认识我，我怕谁？</p>
<h3 id="回国前三天行程">回国前三天行程</h3><p>第四天我去了布莱顿，英吉利海峡海边。那边太棒了，很美，有个水上乐园，好多小朋友去玩。里面的各种娱乐设施都比国内刺激多了，我都不太敢去玩，在那买了一份铁板烧鸡肉面之后就边吃边走回了海滩。在海边逛了一天，晒了一天太阳，回来后就惨了，皮肤晒伤整个人都黑了太多，后来还脱皮。</p>
<p>第五天我去了剑桥，脸上还有点疼。很漂亮的地方，很多学院是需要门票才可以进去参观的。在剑桥看到了好几个中国旅行团。</p>
<p>第六天我在伦敦重新走了一遍大本钟路线，主要在海德公园里面逛，本想到了晚上去大本钟和伦敦眼看夜景的。不过到了7点多的时候开始下雨，忘记带伞不得不往家的方向走。</p>
<h3 id="三次去餐厅">三次去餐厅</h3><p><strong>一</strong></p>
<p>2015年8月28日，布莱顿。<br>我去餐厅吃饭了。<br>我想吃海鲜。</p>
<p>我去了朋友介绍的一家西班牙海鲜餐厅，非常想尝一尝蟹、虾、扇贝之类的海鲜。<br>我大着胆子站到了餐厅门口。</p>
<blockquote>
<p>One please.</p>
</blockquote>
<p>然后跟着服务员找到座位，坐下点餐。</p>
<p>菜单全英文而且不带菜品图片，没办法我只能找认识的关键字。点了一份带 <code>Oyster</code> 的菜，还有一份带 <code>Banana</code> 香蕉的点心，我不知道具体分量，没敢点太多，就这2样了，喝的也不要。<code>Oyster</code> 这个单词我认识，英国公交卡有牡蛎卡，就是这个单词。首先上的点心，很不错摆的造型像一艘小船。上面是一块饼干像帆，中间是2个冰激凌球，下面是2个烤香蕉，吃着不错。终于主食上来了，服务员端来了好大一盆，盆里面有好多冰块和几片柠檬，还有我点的 <code>Oyster</code>，生的。<br>。。。。。。</p>
<p>谁想问我后来怎么了，我抽死他。<br>没有事先找朋友推荐几个菜，我真是笨晕了，后悔死了。</p>
<p><strong>二</strong></p>
<p>2015年8月29日，剑桥。<br>我去餐厅吃饭了。<br>我想吃肉。</p>
<p>我用 pad 连上免费 WIFI，在剑桥大商场购物中心附近找到一家餐厅，非常想吃肉。<br>我大着胆子站到了餐厅门口。</p>
<blockquote>
<p>One please.</p>
</blockquote>
<p>然后跟着服务员找到座位，坐下点餐。</p>
<p>菜单全英文而且不带菜品图片，没办法我只能找认识的关键字。点了一份带 <code>Chicken</code> 鸡肉的菜。然后翻了2遍，没找到果汁饮料，都是一些 <code>Wine</code> 酒之类的。我看服务员等了一会了，无奈我又开口说英语了。</p>
<blockquote>
<p>Orange juice.</p>
</blockquote>
<p>她听懂了，一次就过，我太开心了。首先上来的是橙汁，鲜榨的，不错。终于主食上来了，服务员端来一个平整的木盘，上面3片烤面包，旁边是酱汁。我开始怀疑服务员上错菜了，喝了好几口果汁，暂时没敢动面包。但我又不知道该怎么和服务员说，心一横开吃。面包有点硬，因为有点饿很快吃完一片。然后开始尝试沾些酱汁吃面包，酱汁表面是一层黄油，黄油我直接吃了。尝了一下酱汁的味道，我靠，鸡肉味的。</p>
<p>三片面包和酱汁都吃完了，喝完果汁，饱了。</p>
<blockquote>
<p>Bill please.</p>
</blockquote>
<p>结账，走人。</p>
<p><strong>三</strong></p>
<p>2015年8月30日，伦敦。<br>我去餐厅吃饭了。<br>我想吃烤肉。</p>
<p>这是我旅行最后一天，明天将回国。所以出去之前在家里做了一些功课，网上查找到了餐厅的详细信息。找到几个想吃的菜，记下了菜的英文名和价格，还特意看过了网友提供的图片，非常想吃烤肉。<br>我大着胆子站到了餐厅门口。</p>
<p>这次服务员们正好都在收拾餐桌，然后有一位服务员向我微笑并示意我可以自己随意找位置坐，因为空位很多。我看向她并用手指了一个靠窗的位置，她点头，我坐下，拿到菜单后开始点餐。</p>
<p>开心啊，这次我将菜名和价格都抄下来了的。找了好几遍，结果只找到了炸鱿鱼圈，烤羊排和果汁饮料还有几个备菜都没有找到，这信息过时也太快了吧。不行我就要吃羊肉，然后比对价格找到一个和烤羊排相差不多的英文菜名。赶紧用 pad 翻译了一下，反正服务员还没有过来，看到是羊腿，这个菜我点了。再看饮料，我点了一份香蕉牛奶，这几个单词我认识。服务员过来之后，我点到主菜羊腿那个时，她用英语问了我一些问题，应该是关于配菜的，听不懂。然后她在菜单上找到我点的羊腿，指了下2个单词 <code>Mash</code> or 另一个没记住，让我选，我想都没想就选了 <code>Mash</code> 记下了这个单词。反正我也不知道意思，多想无用。后来我发现这个单词是针对配菜土豆的，他们帮我把土豆打成了土豆泥，很好吃。首先上来的是香蕉牛奶，然后是炸鱿鱼圈。主菜好大一盘，好像是炖菜，配菜有青椒、黄瓜、土豆、胡萝卜、洋葱等，中间一个大羊腿，好多肉，还有单独的一碗土豆泥。大口吃肉，实在是太过瘾了。</p>
<p>这一顿吃的很饱，有点撑，虽然不是烤肉，但我还是很满足。在回国的前一天已经达到了我的预期，我买完单留下10%的小费走了。我不是觉得自己很有钱，只是此时我的感觉就好像是完成了一件自己的心愿，很开心。</p>
<h2 id="旅行期间感受">旅行期间感受</h2><p>在伦敦的几天下了几次雨，伦敦的雨有时会伴着很大的风，撑伞不太管用。我在路上看到很多人都是不打伞的，直接快步冒雨走，真的很多人都这样。不过伦敦的雨没有接连下几天，很快就放晴了，我还拍到了彩虹。不多久就是蓝天白云，空气很好。一大早起来马路上车少，人更少，我见到的人一般都是早起跑步的，还有穿好骑行服骑自行车的，很多骑自行车的。我住的地方门口就是一个自行车停放点，可以骑走和归还自行车的。我还没养成靠左的习惯和不熟悉道路，就没去办自行车卡了。好像一般的餐厅都是等到11点以后才开门的，不像在国内大家都很早就起床了。我有时候9点多出门，都还没见室友起床的，我和室友们碰面的次数很少，基本都是简单的招呼后就走了，他们都知道我不会使用英语交流啊。</p>
<p>伦敦的公园面积非常大。公园里的树都是那种古老的树干很粗的大树，里面还有很广阔的草坪，我都开始感觉那是草原了。草坪上面可以随意踩踏，不过一般不会有太多人故意去走草地，逛公园的人都是绕着公园小路走。只有到了下午会有很多小朋友还有年轻人在草地上玩耍和踢球。公园里面最多的就是鸽子，还有鹅和其他一些鸟类，也有小松鼠。这些动物都不怎么怕人，只有少数的旅行者的小孩会去赶一下它们，其他大人都是直接喂食物的。</p>
<p>伦敦路上的行人都很有风度。一般和你照面的时候，只要视线接触他们都对你微笑。在早上就会直接说 <code>Morning</code>，我在公园和火车上都真实体会过了。如果路上人多他们不小心碰了你一下都会说一声 <code>Sorry</code>，假如你给他们让路了，他们一定会说 <code>Thank you</code> 的。他们很有次序，只要有排队的，一定会主动走到队伍后面去排队。有一次我在白金汉宫附近，看见对面走过来一个板着脸的中国人，在他看到我的时候我对着他微笑了一下，他的表情立即也变成了微笑，那感觉真是无法形容。在伦敦客户和服务人员之间都是相互感谢的，餐厅里会一直有服务员过来巡视，看客人是否有额外需要。服务员看到盘子空了之后，会立即帮你撤走空盘，然后客人都会说一声 <code>Thank you</code>。大家都相互尊重着对方，太棒了。</p>
<p>伦敦很多设计都体现了高效。伦敦有很多乐购超市，里面都会有好多台客人自助结账机。客人可以自己使用这些机器扫描货物，然后刷卡买单，好像是一些会员卡之类的。希思罗机场里面的自助结账机可以收现金的，我没有试过乐购的机器，每次都是走的人工结账通道。伦敦大部分红绿灯都是需要过马路的人按一下才会转绿灯的，否则在十字路口红绿灯是不会自动转绿灯的，这样车辆就可以畅通了。有些路口根本没有红绿灯，就是一根柱子上面一个一闪一闪的黄色的球状灯。当有行人站在下面时，过往的车辆就主动停下，让行人先过马路。我好几次都没弄明白，当我看到车上师傅在像我招手意思是我先过马路后，我才渐渐明白了这种设计的意义。伦敦的火车站是没有独立候车室的，就一个大厅墙上显示车次信息，显示屏下面前方就是几排座位，乘客可以坐下休息候车。然后旁边就是刷票口，里面就是火车铁轨尽头，火车就在那了，到点你就可以刷票直接进去坐火车，流程相当简单。车次很多，火车需要满座我感觉非常非常困难，因为我坐了5次火车，好多站过去我都是一个人一个车厢，随意选座位。火车里面宽敞，座位很舒服，然后火车门都是乘客自己按开门按钮打开的，火车路途中经过的站台都会停，但是如果没有人开启车门的话，只会等很短的一点时间火车就启动走了。听说伦敦的双层巴士也是这样的，到站后需要乘客自己按车才会停，否则就直接开过去到下一站。</p>
<p>在伦敦使用信用卡是不需要密码的，就算你在国内开的卡有设置密码。开始时不明白这样做的意义，我网上看了好些文章，大概是这样的。</p>
<blockquote>
<p>凭密码消费的信用卡如果被盗刷，责任在用户。因为凭密码消费的信用卡消费依据是密码，如果用户没保存好密码，被盗刷了银行不负责。有时候某些银行会鼓励用户设置密码，其实这是国内银行设的陷阱，他们在推卸责任。</p>
<p>没有密码的信用卡交易，消费依据是签名。商家在刷你的信用卡时，需要比照你在消费凭条上的签名是否与卡背面签名一致，如果不一致，持卡人可以申诉，主张消费无效，并把被盗刷的金额追讨回来，损失由商家承担（谁让他们不对照签名呢？）。如果你的信用卡丢了，一般来说别人是无法模仿出一样的签名的。即使被盗刷，你可以向银行追讨回来。比如我用的招商银行一天的追讨上限是一万五，而我信用卡的固定额度只有一万四，即使信用卡丢了被盗刷，我都可以追讨回来。</p>
</blockquote>
<p>但是我刷了2次信用卡从机器上面买火车票，没有核对签名没有输过密码，不知道这种盗刷是怎么处理的？</p>
<p>我在伦敦就被查了一次护照，当时在乐购超市买一瓶2镑多的果味酒，名字是这个 <code>Stella Cidre</code>，很好喝。收银员看了我的护照后，才卖给我，难道我看着像18岁的人吗？我在英国遇到了很多中国人，26号遇到2次。当时我在大英博物馆里面转，后面一位阿姨过来问我会不会说中文，很开心，我说会。她找不到中国馆在哪里，问我知不知道。大英博物馆真的很大，里面展示出好多文物，都是分区域的，分五大洲、各国展馆。我当时去的第二个展馆就是中国馆，稀里糊涂转进去的，我还给阿姨看了我在里面拍的照片，但是我也找不到回去的路了。阿姨看到我拍的照片后就决定先跟着我找中国馆，我们转了一会幸好遇到了她团里面的一位同伴。她同伴知道中国馆在哪里，如果还跟着我转，那我也太不靠谱了。从大英博物馆出来后，我往圣保罗教堂方向走。这次遇到了一对台湾夫妇，他们从爱丁堡一直旅行到伦敦的，说隔天就回国了。他们找不到最近的地铁站在哪里，然后我用 Google 地图导航直接把他们带到了地铁站。</p>
<p>最后，给大家提个醒，时刻注意安全。在大本钟和伦敦眼之间的大桥上，一般是下午那儿人很多，桥上好几拨人在地上摆弄着一个小把戏。桥面地上扣着3个杯子，其中一个杯子下有一个球，庄家不停的将小球转换到另一个杯子，然后让路人猜。参与猜的人先给押金，猜中押金退还还有额外的现金奖励。这样的骗人小把戏我在国内见多了，竟然在伦敦也有真是意外。当时我没太在意直接对着拍了一张照，旁边有一个人见我拍照，直接身子移过来挡住我。然后又过来一个人，使用带命令的口吻对我说了一堆英语，并不再让我靠近。我急忙把拍照的 pad 收起来，走开了，回想起来我的胆子还真大。第二次去的时候，我只在旁边观察，亲眼见到一位外国美女被骗后，自己整个人心情都不好了。那一拨人都是以小组为单位的，有做庄移动小球的，有在周围放哨的，然后还有输钱的和赢钱的这种都是他们自己人纯属打造气氛。他们骗到那位美女后立即收手，收拾走人。我不排除周围还有扒手的，所以大家见到这种地方直接绕过吧，尽量保证自己安全。</p>
<h2 id="回国后">回国后</h2><p>回到上海后竟然有点不适应的感觉。灰蒙蒙的天空，不见了蓝天白云，吵杂的公园，不见了安静宽广的绿草地。板着脸走过的路人，不见了会趁你微笑的绅士，插队和拥挤不堪的公交，不见了主动排队和舒适的红色双层巴士。还刚到伦敦的那会就有朋友和我说出去兜一圈是要毁三观的，这次我无法反驳了。</p>
<p>前段时间我还看完了BBC关于中国老师在英国教学的纪录片，中国老师从始至终都相信着中国的教育模式。由中国老师教出的学生们最终的考试平均分均高于英国老师教出的学生的考试平均分，这无疑表明中国式教育更有优势。但是看完纪录片后，你的感受真的是这样吗？为什么英国的大学里充满了中国学生？假如你的学习生涯重来一次，英式教育学校和中式教育学校，你会选择哪一个？</p>
<p>虽然我第一次出国就感受到了国内和国外的一些差距，这些我还是可以理解的。我们的国家地域宽广，人口众多，就算将国外的那一套整个搬过来，我看不见得有效。我们每个人都有自己该做的事情，过好自己这一生，不给别人添乱就很不错了。我们祖国的明天会更好，我始终相信着。</p>
<h2 id="旅行消费清单">旅行消费清单</h2><p><strong>预算：25000元</strong></p>
<table>
<thead>
<tr>
<th>消费项</th>
<th>金额（元）</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>签证费</td>
<td>850</td>
<td>英国6个月旅游签证</td>
<td></td>
</tr>
<tr>
<td>机票</td>
<td>9627</td>
<td>上海到伦敦希思罗机场往返机票，下次出游考虑买转机更便宜</td>
<td></td>
</tr>
<tr>
<td>住宿</td>
<td>2607</td>
<td>在 Airbnb 的订单，7晚独立房间2326元，Airbnb 服务费281元</td>
<td></td>
</tr>
<tr>
<td>接机</td>
<td>400</td>
<td>从希斯罗机场到达住宿地点，主要是赶时间</td>
<td></td>
</tr>
<tr>
<td>现金</td>
<td>2000</td>
<td>350镑现金还剩150镑，吃饭、零食、景点门票、火车票</td>
<td></td>
</tr>
<tr>
<td>信用卡</td>
<td>260</td>
<td>刷卡2次，买火车票</td>
<td></td>
</tr>
<tr>
<td><strong>总计</strong></td>
<td>15744</td>
<td>总共花费，安全返回</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="附录">附录</h2><p><a href="http://photo.weibo.com/2200504514/albums/detail/album_id/3883344290019022?from=profile_wb&amp;pos=1#!/mode/1/page/1" target="_blank" rel="external">我拍的旅行照片微博相册地址</a><br><a href="http://www.bangli.uk/9886.html" target="_blank" rel="external">入境卡填写信息</a><br><a href="http://site.douban.com/143903/widget/notes/7032297/note/378886831/" target="_blank" rel="external">英国人这样说英语</a><br><a href="http://www.honglingjin.co.uk/37991.html" target="_blank" rel="external">英国邮编</a><br><a href="http://www.tfl.gov.uk/modes/cycling/" target="_blank" rel="external">伦敦自行车租赁</a><br><a href="http://www.nationalrail.co.uk" target="_blank" rel="external">英国火车票官网</a></p>
]]></content>
    <summary type="html">
    <![CDATA[英国旅行]]>
    
    </summary>
    
      <category term="旅游" scheme="http://tigerforest.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="旅游" scheme="http://tigerforest.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[上海申请英国个人旅游签证分享]]></title>
    <link href="http://tigerforest.github.io/2015/07/30/UKVisa/"/>
    <id>http://tigerforest.github.io/2015/07/30/UKVisa/</id>
    <published>2015-07-29T20:30:00.000Z</published>
    <updated>2015-08-12T01:04:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="申请之前">申请之前</h2><p>不记得从什么时候开始的了，那时我迷上了欧美大片，欧美音乐。看了很多欧美电影预告片，感觉不错的我都会在第一时间去电影院看。听的最多的英语歌是 Owl City 和 One Direction 的歌曲，非常耐听。这之后我就萌发了要去欧美旅游的想法，所以2015年初我就直接开始策划出去旅游。第一站选择了英国，小破团 One Direction 的成员分别来自英国和爱尔兰啊。</p>
<p>虽然我英语很烂，听不懂，读不准，但是仍然没有成功阻止我。<br><a id="more"></a></p>
<h2 id="准备递签材料">准备递签材料</h2><p>我是自己递签的，事先网上查阅了大量的资料。下面先写我自己准备的情况，最后会提供一份《赴英国个人旅游签证指南》的文档，如果是学生或其他人士可以参考这份文档。</p>
<h3 id="自身基本情况">自身基本情况</h3><ul>
<li>上海固定工作者</li>
<li>外地户口</li>
<li>为递签准备的银行流水文件余额显示为3.2万</li>
<li>每月收入中等吧</li>
</ul>
<h3 id="我提交的材料">我提交的材料</h3><ol>
<li><p>打印好的在线申请材料（一份）</p>
<ul>
<li>在线申请地址为：<a href="https://www.visa4uk.fco.gov.uk/home/welcome" target="_blank" rel="external">https://www.visa4uk.fco.gov.uk/home/welcome</a>。</li>
<li>需要自己注册账号，然后将信息全部打印出来，录入数据时记得保存。</li>
</ul>
</li>
<li><p>身份证翻译件和正反面复印件（各一份）</p>
</li>
<li><p>户口本翻译件和复印件（各一份）</p>
<ul>
<li>我翻译和复印了户口本整本信息，包括注意事项说明那一页和登记事项变更和更正记载表格。</li>
<li>A4 纸上可以将 常住人口登记卡 和 登记事项变更和更正记载 放在同一页。</li>
<li>我家的户口本还是2005年的，一直没有去更新。</li>
</ul>
</li>
<li><p>英文在职证明原件（一份）</p>
<ul>
<li>我自己写好英文模板，留出签字空位，发给公司确认并打印的原件。</li>
<li>这份文件的要求是：必须使用公司抬头的信纸，内容包括我的职位、薪资、任职时间，以及公司方签字和公司方联系方式。</li>
</ul>
</li>
<li><p>银行6个月交易流水原件（一份）</p>
<ul>
<li>我是等到公司发完当月工资第二天才去打银行流水的，因为银行不能打印当天的流水信息。</li>
</ul>
</li>
<li><p>旅游行程单英文打印件（一份）</p>
<ul>
<li>我在穷游网做了一份7天的行程单，2天路上，5天游玩，游玩不要安排的太紧凑。</li>
</ul>
</li>
<li><p>翻译件提供人说明文件打印件（一份）</p>
<ul>
<li>翻译人是我自己。</li>
<li>内容指明自己提供的翻译件是原始文件的准确翻译，然后翻译时间、地点，签字。</li>
</ul>
</li>
<li><p>白底彩色照片（一张）</p>
<ul>
<li>照片尺寸：45mm x 35mm。</li>
<li>最近一个月内拍摄的照片。</li>
<li>我在地铁站拍的，6张全带上了，但只收了一张。</li>
</ul>
</li>
</ol>
<h2 id="递签">递签</h2><p>递签是需要提前预约时间的，填写在线申请材料时自己指定预约日期和时间。上海签证中心好像是不久前搬到了黄浦区四川中路213号久事商务大厦，离我上班的地方15分钟的路程。</p>
<ul>
<li><p><strong>签证中心递签流程</strong></p>
<ol>
<li>取号，根据你的预约时间工作人员会给你排号。等待被叫号。</li>
<li>贴照片，工作人员会帮你把照片贴在那一份打印好的在线申请材料上面。等待被叫号。</li>
<li>递交材料，被叫号之后就去对应的窗口递交材料，中间会问你是否需要快递或自取几个问题。等待下次叫号做生物信息采集。</li>
<li>采集生物信息，拍摄照片和数字指纹扫描。采集完就可以回去等通知了。</li>
</ol>
</li>
</ul>
<p>我预约的是6月19日下午3点半递签，当日人非常的多，一直排队弄到晚上7点多才完成。排在我后面的还有相当一部分，真是不知道什么鬼了那天那么多人。之后我去过几次签证中心人没有那天多，基本都是5点多工作人员都下班了。</p>
<h2 id="取签">取签</h2><p>7月3日我收到邮件通知，大概意思是说我的申请材料正在返回签证中心，在收到签证中心的通知之前不要联系签证中心。</p>
<p>然后我就信了，一直等到7月28日都没有消息，中间我时常手动刷新自己的邮箱，翻遍了垃圾箱和广告邮件，就怕被过滤了。因为28日当天有点小忙，抽空下午4点才到达签证中心，工作人员说已经下班了今天不能查询进度，查询进度的时间是上午8点至下午3点。</p>
<p>第二天，7月29日中午我就去了签证中心，进度查询和递签的排号是分开的，所以我拿到号之后马上就可以查询进度，工作人员说可以取签，有点小小的惊喜，取了就走。回到公司就撕文件袋，里面都是我前面递交的材料和贴了一张英国 visa 的我的护照，只有一份贴了我照片的在线申请材料的文件没有返回给我。</p>
<p>这之后我有空都在为接下来的旅游行程做准备，出发日期已经定好在8月底了。我没有事先预定机票和住宿，提交的材料也只是一份简单的旅游行程单。财力证明那块只打印了银行流水和公司在职证明上面的薪水说明，网上说要冻结至少5W余额的我没管。</p>
<p>我准备的材料都是以预算2500英镑（约RMB2.5万）为准的，在线申请材料里面需要填写旅游期间交通、住宿等每一项的花费。我感觉只需要自己银行流水余额大致能满足自己的预算花费，财力证明这块是没有问题的。现在我已经买好机票订好了住房，真是超了一大截啊。</p>
<h2 id="附录">附录</h2><ul>
<li><a href="https://www.gov.uk/government/publications/apply-for-a-uk-visa-in-china/--2" target="_blank" rel="external">英国签证申请流程</a></li>
<li><a href="https://www.visa4uk.fco.gov.uk/home/welcome" target="_blank" rel="external">英国签证在线申请材料账号注册</a></li>
<li><a href="http://7xk4yh.com1.z0.glb.clouddn.com/ind-trav-chi.pdf" target="_blank" rel="external">赴英国个人旅游签证指南</a></li>
<li><a href="http://plan.qyer.com/create" target="_blank" rel="external">穷游创建行程单</a></li>
<li><a href="http://music.163.com/#/song?id=32835004" target="_blank" rel="external">Owl City 的 Unbelievable</a></li>
<li><a href="http://music.163.com/#/song?id=27971460" target="_blank" rel="external">One Direction 的 Strong</a></li>
<li><a href="http://www.yugaopian.com" target="_blank" rel="external">电影预告片世界</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[英国旅游签证申请]]>
    
    </summary>
    
      <category term="Visa" scheme="http://tigerforest.github.io/tags/Visa/"/>
    
      <category term="旅游" scheme="http://tigerforest.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="旅游" scheme="http://tigerforest.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mockito+Spring 集成单元测试]]></title>
    <link href="http://tigerforest.github.io/2015/07/13/mockito/"/>
    <id>http://tigerforest.github.io/2015/07/13/mockito/</id>
    <published>2015-07-13T01:49:45.000Z</published>
    <updated>2016-01-13T10:47:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="我遇到的问题">我遇到的问题</h2><p>我需要对一长串的数据处理流程做验证测试，多个应用接口相互依赖，而本地环境无法调用其他应用的接口。之前一般都是在代码里面写死接口返回参数，不推荐这样做，使用 Mockito 完全可以解决这个问题。本文介绍基于 Mockito 1.8.5。</p>
<h2 id="Mockito_简单例子">Mockito 简单例子</h2><p><a href="http://liuzhijun.iteye.com/blog/1512780" target="_blank" rel="external">Mockito 是什么?</a></p>
<p>我准备了一些有趣的类来完成我的测试：</p>
<ul>
<li>OrderCreate.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.practice.mock</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * mock 测试准备类</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> tiger</span><br><span class="line"> * <span class="doctag">@version</span> 1.0.0 createTime: 14/12/27 下午8:57</span><br><span class="line"> * <span class="doctag">@see</span> com.practice.mock.OrderHelper</span><br><span class="line"> * <span class="doctag">@since</span> 1.6</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderCreate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderHelper orderHelper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getAmt());</span><br><span class="line">        System.out.println(orderHelper.resolve());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAmt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>OrderHelper.java</li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package com.practice.mock;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">/<span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> mock 测试准备类</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@author tiger</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@version 1.0.0 createTime: 14/12/27 下午8:59</span></span><br><span class="line"> <span class="keyword">*</span> <span class="comment">@since 1.6</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line"><span class="comment">@Component</span></span><br><span class="line">public class OrderHelper &#123;</span><br><span class="line"></span><br><span class="line">    public String resolve() &#123;</span><br><span class="line">        return <span class="string">"resolve order"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>MockSpringTest.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.practice.mock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.practice.mock.BaseSpringTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.mockito.InjectMocks;</span><br><span class="line"><span class="keyword">import</span> org.mockito.Mock;</span><br><span class="line"><span class="keyword">import</span> org.mockito.MockitoAnnotations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.util.ReflectionTestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * mock 测试</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;spinrg + mock 测试的例子</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> tiger</span><br><span class="line"> * <span class="doctag">@version</span> 1.0.0 createTime: 15-1-8 下午5:07</span><br><span class="line"> * <span class="doctag">@since</span> 1.6</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockSpringTest</span> <span class="keyword">extends</span> <span class="title">BaseSpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> OrderCreate orderCreate = mock(OrderCreate.class);</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> OrderHelper orderHelper;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMocks</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MockitoAnnotations.initMocks(<span class="keyword">this</span>);</span><br><span class="line">        doReturn(<span class="number">11</span>).when(orderCreate).getAmt();</span><br><span class="line">        doReturn(<span class="string">"success"</span>).when(orderHelper).resolve();</span><br><span class="line">        doCallRealMethod().when(orderCreate).create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start mock..."</span>);</span><br><span class="line">        orderCreate.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行结果及说明">运行结果及说明</h3><p>运行输出结果是：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">start</span> mock...</span><br><span class="line"><span class="number">11</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure>
<p>OrderCreate 的 getAmt 方法和 OrderHelper 的 resolve 方法被成功 mock。</p>
<p>说明一下：@InjectMocks 会给 OrderCreate 装配 orderHelper 属性，其实根据 @Mock 注解来的。在 <code>MockitoAnnotations.initMocks(this)</code> 执行完后，mock 初始化了 OrderCreate 的私有属性 orderHelper。当调用 orderHelper 的方法时不会执行真实的方法体，会执行 mack 操作 <code>doReturn(&quot;success&quot;).when(orderHelper).resolve()</code>，即调用 resolve 方法时始终返回 success 字符串。这里 OrderCreate 本身也是被 mock 了。</p>
<p>稍微觉得 Mockito 有点意思了吧，这仅是一个简单的例子。在我开始 mock 处理时我前面还有一长串的处理逻辑，这关系到我是否要从入口开始 mock，如果真是这样想想我就晕了。</p>
<h2 id="开始解决问题">开始解决问题</h2><p>我为了继续试验又加了几个类：</p>
<ul>
<li>OrderBefore.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.practice.mock;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span><br><span class="line"> * mock 测试准备类  </span><br><span class="line"> *  </span><br><span class="line"> * <span class="doctag">@author</span> tiger  </span><br><span class="line"> * <span class="doctag">@version</span> 1.0.0 createTime: 15-1-8 下午7:51  </span><br><span class="line"> * <span class="doctag">@since</span> 1.6  </span><br><span class="line"> */</span>  </span><br><span class="line"><span class="annotation">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderBefore</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> OrderStart orderStart;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"before..."</span>);  </span><br><span class="line">        orderStart.start();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>OrderStart.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.practice.mock;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span><br><span class="line"> * mock 测试准备类  </span><br><span class="line"> *  </span><br><span class="line"> * <span class="doctag">@author</span> tiger  </span><br><span class="line"> * <span class="doctag">@version</span> 1.0.0 createTime: 15-1-8 下午7:51  </span><br><span class="line"> * <span class="doctag">@since</span> 1.6  </span><br><span class="line"> */</span>  </span><br><span class="line"><span class="annotation">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderStart</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="annotation">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> OrderCreate orderCreate;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"start..."</span>);  </span><br><span class="line">        orderCreate.create();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单元测试类 MockSpringTest 的代码变成了这样：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MockSpringTest</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">BaseSpringTest</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">OrderBefore</span> orderBefore;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">OrderCreate</span> orderCreate = mock(<span class="type">OrderCreate</span>.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">OrderHelper</span> orderHelper;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Before</span></span><br><span class="line">    public void initMocks() <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">        <span class="type">MockitoAnnotations</span>.initMocks(<span class="keyword">this</span>);</span><br><span class="line">        doReturn(<span class="number">11</span>).when(orderCreate).getAmt();</span><br><span class="line">        doReturn(<span class="string">"success"</span>).when(orderHelper).resolve();</span><br><span class="line">        doCallRealMethod().when(orderCreate).create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    public void create() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"start mock..."</span>);</span><br><span class="line">        orderBefore.before();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>猜一下会输出什么。</p>
<h3 id="运行结果及分析">运行结果及分析</h3><p>运行输出结果是：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start mock<span class="attribute">...</span></span><br><span class="line">before<span class="attribute">...</span></span><br><span class="line">start<span class="attribute">...</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line">resolve <span class="keyword">order</span></span><br></pre></td></tr></table></figure>
<p>很遗憾，没有达到预期输出。</p>
<p>从 OrderBefore 的 before() 方法开始，调用了 @Autowired 注入的 orderStart.start()，然后又调了 @Autowired 注入的 orderCreate.create()，再调用了 @Autowired 注入的 orderHelper.resolve() 结束。整个流程没有和 mock 扯上关系，看似唯一的解决办法就是从程序入口开始 mock，一直 mock 到整个流程结束。</p>
<h3 id="问题解决">问题解决</h3><p>幸好，我找到了这篇帖子：<a href="http://www.cnblogs.com/syxchina/p/4150879.html" target="_blank" rel="external">spring中使用mockito</a>。<br>我引进了帖子中的 AopTargetUtils 工具类之后解决了我的问题，MockSpringTest 的代码变成了下面这样：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MockSpringTest</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">BaseSpringTest</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Order</span> order;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">OrderBefore</span> orderBefore;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">OrderStart</span> orderStart;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">OrderCreate</span> orderCreate = mock(<span class="type">OrderCreate</span>.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">OrderHelper</span> orderHelper;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Before</span></span><br><span class="line">    public void initMocks() <span class="keyword">throws</span> <span class="type">Exception</span> &#123;</span><br><span class="line">        <span class="type">MockitoAnnotations</span>.initMocks(<span class="keyword">this</span>);</span><br><span class="line">        <span class="type">ReflectionTestUtils</span>.setField(<span class="type">AopTargetUtils</span>.getTarget(orderStart), <span class="string">"orderCreate"</span>, orderCreate);</span><br><span class="line">        doReturn(<span class="number">11</span>).when(orderCreate).getAmt();</span><br><span class="line">        doReturn(<span class="string">"success"</span>).when(orderHelper).resolve();</span><br><span class="line">        doCallRealMethod().when(orderCreate).create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Test</span></span><br><span class="line">    public void create() &#123;</span><br><span class="line">        <span class="type">System</span>.out.println(<span class="string">"start mock..."</span>);</span><br><span class="line">        orderBefore.before();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行成功输出：</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start mock...</span><br><span class="line">before...</span><br><span class="line">start...</span><br><span class="line"><span class="number">11</span></span><br><span class="line">success</span><br></pre></td></tr></table></figure>
<p>另外，BaseSpringTest 是我用来加载 Spring 配置的。Mock 的常用注解还有 @Mock，@InjectMocks，@Spy，@Captor 这些，不了解的话 google 一下吧。</p>
<p><em>这篇文章我曾发表于 <a href="http://xiahaihuje.iteye.com/blog/2174150" target="_blank" rel="external">iteye 链接</a>。</em> <img src="https://s.tylingsoft.com/emoji-icons/smile.png" width="64"></p>
<h2 id="附录">附录</h2><ul>
<li><a href="http://liuzhijun.iteye.com/blog/1512780" target="_blank" rel="external">Mockito 是什么?</a></li>
<li><a href="http://www.cnblogs.com/syxchina/p/4150879.html" target="_blank" rel="external">spring中使用mockito</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Mockito+Spring 集成单元测试]]>
    
    </summary>
    
      <category term="Mockito" scheme="http://tigerforest.github.io/tags/Mockito/"/>
    
      <category term="Spring" scheme="http://tigerforest.github.io/tags/Spring/"/>
    
      <category term="单元测试" scheme="http://tigerforest.github.io/categories/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Retrofit 源码解析]]></title>
    <link href="http://tigerforest.github.io/2015/07/09/retrofit/"/>
    <id>http://tigerforest.github.io/2015/07/09/retrofit/</id>
    <published>2015-07-09T15:20:45.000Z</published>
    <updated>2015-07-10T08:01:20.000Z</updated>
    <content type="html"><![CDATA[<p>最近在搭建 Android 后端 RESTful 微服务，经推荐采用 Retrofit 框架来调用 RESTful API。我使用的是 1.9.0 版本，抽出些时间读了一遍源码，有很多地方值得学习。</p>
<p><a href="http://square.github.io/retrofit/" target="_blank" rel="external">A type-safe REST client for Android and Java</a><br><a id="more"></a></p>
<h2 id="Retrofit_使用源码示例">Retrofit 使用源码示例</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">GitHubClient</span> </span>&#123;</span><br><span class="line">    private <span class="literal">static</span> <span class="keyword">final</span> <span class="built_in">String</span> API_URL = <span class="string">"https://api.github.com"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="literal">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Contributor</span> </span>&#123;</span><br><span class="line">        <span class="built_in">String</span> login;</span><br><span class="line">        <span class="built_in">int</span> contributions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">GitHub</span> </span>&#123;</span><br><span class="line">        <span class="annotation">@GET</span>(<span class="string">"/repos/&#123;owner&#125;/&#123;repo&#125;/contributors"</span>)</span><br><span class="line">        <span class="built_in">List</span>&lt;Contributor&gt; contributors(</span><br><span class="line">                <span class="annotation">@Path</span>(<span class="string">"owner"</span>) <span class="built_in">String</span> owner,</span><br><span class="line">                <span class="annotation">@Path</span>(<span class="string">"repo"</span>) <span class="built_in">String</span> repo</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="literal">static</span> <span class="keyword">void</span> main(<span class="built_in">String</span>... args) &#123;</span><br><span class="line">        <span class="comment">// Create a very simple REST adapter which points the GitHub API endpoint.</span></span><br><span class="line">        RestAdapter restAdapter = <span class="keyword">new</span> RestAdapter.Builder()</span><br><span class="line">                .setEndpoint(API_URL)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create an instance of our GitHub API interface.</span></span><br><span class="line">        GitHub github = restAdapter.create(GitHub.<span class="keyword">class</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fetch and print a list of the contributors to this library.</span></span><br><span class="line">        <span class="built_in">List</span>&lt;Contributor&gt; contributors = github.contributors(<span class="string">"square"</span>, <span class="string">"retrofit"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Contributor contributor : contributors) &#123;</span><br><span class="line">            System.out.println(contributor.login + <span class="string">" ("</span> + contributor.contributions + <span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>String API_URL</code>：RESTful API 接口域名。</li>
<li><code>interface GitHub</code>：定义了一个 <code>contributors</code> 方法，该方法会通过 HTTP GET 请求去访问服务器的 <code>/repos/{owner}/{repo}/contributors</code> 路径，并把返回结果封装到 <code>List&lt;Contributor&gt;</code> 中。</li>
<li><code>restAdapter.create(GitHub.class)</code>：生成一个 <code>interface GitHub</code> 的实现类。</li>
<li><code>github.contributors(&quot;square&quot;, &quot;retrofit&quot;)</code>：调用接口和服务器交互，<code>&quot;square&quot;</code> 和 <code>&quot;retrofit&quot;</code> 会分别替换 <code>{owner}</code> 和 <code>{repo}</code>。</li>
</ul>
<h2 id="RestAdapter-Builder_建造者模式">RestAdapter.Builder 建造者模式</h2><p>builder 模式定义：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。使用场景：相同的方法，不同的执行顺序，产生不同的事件结果时；多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时；产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能，这个时候使用建造者模式非常合适。好处就是按需构造，非常灵活。缺点是：会产生多余的 Builder 对象以及 Director 对象，消耗内存；对象的构建过程暴露。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Build a new &#123;<span class="doctag">@link</span> RestAdapter&#125;.</span><br><span class="line"> * &lt;p/&gt;</span><br><span class="line"> * Calling the following methods is required before calling &#123;<span class="doctag">@link</span> #build()&#125;:</span><br><span class="line"> * &lt;ul&gt;</span><br><span class="line"> * &lt;li&gt;&#123;<span class="doctag">@link</span> #setEndpoint(Endpoint)&#125;&lt;/li&gt;</span><br><span class="line"> * &lt;li&gt;&#123;<span class="doctag">@link</span> #setClient(Client.Provider)&#125;&lt;/li&gt;</span><br><span class="line"> * &lt;li&gt;&#123;<span class="doctag">@link</span> #setConverter(Converter)&#125;&lt;/li&gt;</span><br><span class="line"> * &lt;/ul&gt;</span><br><span class="line"> * &lt;p/&gt;</span><br><span class="line"> * If you are using asynchronous execution (i.e., with &#123;<span class="doctag">@link</span> Callback Callbacks&#125;) the following</span><br><span class="line"> * is also required:</span><br><span class="line"> * &lt;ul&gt;</span><br><span class="line"> * &lt;li&gt;&#123;<span class="doctag">@link</span> #setExecutors(java.util.concurrent.Executor, java.util.concurrent.Executor)&#125;&lt;/li&gt;</span><br><span class="line"> * &lt;/ul&gt;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Endpoint endpoint;</span><br><span class="line">    <span class="keyword">private</span> Client.Provider clientProvider;</span><br><span class="line">    <span class="keyword">private</span> Executor httpExecutor;</span><br><span class="line">    <span class="keyword">private</span> Executor callbackExecutor;</span><br><span class="line">    <span class="keyword">private</span> RequestInterceptor requestInterceptor;</span><br><span class="line">    <span class="keyword">private</span> Converter converter;</span><br><span class="line">    <span class="keyword">private</span> Profiler profiler;</span><br><span class="line">    <span class="keyword">private</span> ErrorHandler errorHandler;</span><br><span class="line">    <span class="keyword">private</span> Log log;</span><br><span class="line">    <span class="keyword">private</span> LogLevel logLevel = LogLevel.NONE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...省略一长串代码...</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Create the &#123;<span class="doctag">@link</span> RestAdapter&#125; instances.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">public</span> RestAdapter build() &#123;</span><br><span class="line">        <span class="keyword">if</span> (endpoint == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Endpoint may not be null."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ensureSaneDefaults();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestAdapter(endpoint, clientProvider, httpExecutor, callbackExecutor,</span><br><span class="line">                requestInterceptor, converter, profiler, errorHandler, log, logLevel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> void ensureSaneDefaults() &#123;</span><br><span class="line">        <span class="keyword">if</span> (converter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            converter = Platform.get().defaultConverter();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (clientProvider == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clientProvider = Platform.get().defaultClient();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (httpExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            httpExecutor = Platform.get().defaultHttpExecutor();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (callbackExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            callbackExecutor = Platform.get().defaultCallbackExecutor();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (errorHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            errorHandler = ErrorHandler.<span class="keyword">DEFAULT</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (log == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log = Platform.get().defaultLog();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (requestInterceptor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            requestInterceptor = RequestInterceptor.NONE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="RestAdapter-create_代理模式">RestAdapter.create 代理模式</h2><p>Java 动态代理实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Create an implementation of the API defined by the specified &#123;<span class="doctag">@code</span> service&#125; interface.</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(Class&lt;T&gt; service)</span> </span>&#123;</span><br><span class="line">    Utils.validateServiceClass(service);</span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(service.getClassLoader(), <span class="keyword">new</span> Class&lt;?&gt;[]&#123;service&#125;,</span><br><span class="line">            <span class="keyword">new</span> RestHandler(getMethodInfoCache(service)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代理类 RestHandler 中使用到的缓存实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Method, RestMethodInfo&gt; getMethodInfoCache(Class&lt;?&gt; service) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (serviceMethodInfoCache) &#123;</span><br><span class="line">        Map&lt;Method, RestMethodInfo&gt; methodInfoCache = serviceMethodInfoCache.get(service);</span><br><span class="line">        <span class="keyword">if</span> (methodInfoCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            methodInfoCache = <span class="keyword">new</span> LinkedHashMap&lt;Method, RestMethodInfo&gt;();</span><br><span class="line">            serviceMethodInfoCache.put(service, methodInfoCache);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methodInfoCache;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> RestMethodInfo <span class="title">getMethodInfo</span><span class="params">(Map&lt;Method, RestMethodInfo&gt; cache, Method method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (cache) &#123;</span><br><span class="line">        RestMethodInfo methodInfo = cache.get(method);</span><br><span class="line">        <span class="keyword">if</span> (methodInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            methodInfo = <span class="keyword">new</span> RestMethodInfo(method);</span><br><span class="line">            cache.put(method, methodInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methodInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代理类 RestHandler 实现 InvocationHandler 接口重写 invoke 方法：</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">@<span class="type">SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">@<span class="type">Override</span></span><br><span class="line">public <span class="type">Object</span> invoke(<span class="type">Object</span> proxy, <span class="type">Method</span> <span class="keyword">method</span>, final <span class="type">Object</span>[] args)</span><br><span class="line">        throws <span class="type">Throwable</span> &#123;</span><br><span class="line">    // <span class="type">If</span> the <span class="keyword">method</span> <span class="keyword">is</span> a <span class="keyword">method</span> <span class="keyword">from</span> <span class="type">Object</span> then defer to normal invocation.</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">method</span>.getDeclaringClass() == <span class="type">Object</span>.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">method</span>.invoke(this, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // <span class="type">Load</span> <span class="keyword">or</span> create the details cache <span class="keyword">for</span> the current <span class="keyword">method</span>.</span><br><span class="line">    final <span class="type">RestMethodInfo</span> methodInfo = getMethodInfo(methodDetailsCache, <span class="keyword">method</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (methodInfo.isSynchronous) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> invokeRequest(requestInterceptor, methodInfo, args);</span><br><span class="line">        &#125; catch (<span class="type">RetrofitError</span> error) &#123;</span><br><span class="line">            <span class="type">Throwable</span> newError = errorHandler.handleError(error);</span><br><span class="line">            <span class="keyword">if</span> (newError == null) &#123;</span><br><span class="line">                throw new <span class="type">IllegalStateException</span>(<span class="string">"Error handler returned null for wrapped exception."</span>,</span><br><span class="line">                        error);</span><br><span class="line">            &#125;</span><br><span class="line">            throw newError;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (httpExecutor == null || callbackExecutor == null) &#123;</span><br><span class="line">        throw new <span class="type">IllegalStateException</span>(<span class="string">"Asynchronous invocation requires calling setExecutors."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (methodInfo.isObservable) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rxSupport == null) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="type">Platform</span>.<span class="type">HAS_RX_JAVA</span>) &#123;</span><br><span class="line">                rxSupport = new <span class="type">RxSupport</span>(httpExecutor, errorHandler, requestInterceptor);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                throw new <span class="type">IllegalStateException</span>(<span class="string">"Observable method found but no RxJava on classpath."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rxSupport.createRequestObservable(new <span class="type">RxSupport</span>.<span class="type">Invoker</span>() &#123;</span><br><span class="line">            @<span class="type">Override</span></span><br><span class="line">            public <span class="type">ResponseWrapper</span> invoke(<span class="type">RequestInterceptor</span> requestInterceptor) &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="type">ResponseWrapper</span>) invokeRequest(requestInterceptor, methodInfo, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // <span class="type">Apply</span> the interceptor synchronously, recording the interception so we can replay it later.</span><br><span class="line">    // <span class="type">This</span> way we still defer argument serialization to the background thread.</span><br><span class="line">    final <span class="type">RequestInterceptorTape</span> interceptorTape = new <span class="type">RequestInterceptorTape</span>();</span><br><span class="line">    requestInterceptor.intercept(interceptorTape);</span><br><span class="line"></span><br><span class="line">    <span class="type">Callback</span>&lt;?&gt; callback = (<span class="type">Callback</span>&lt;?&gt;) args[args.length - <span class="number">1</span>];</span><br><span class="line">    httpExecutor.execute(new <span class="type">CallbackRunnable</span>(callback, callbackExecutor, errorHandler) &#123;</span><br><span class="line">        @<span class="type">Override</span></span><br><span class="line">        public <span class="type">ResponseWrapper</span> obtainResponse() &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="type">ResponseWrapper</span>) invokeRequest(interceptorTape, methodInfo, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> null; // <span class="type">Asynchronous</span> methods should have <span class="keyword">return</span> <span class="keyword">type</span> <span class="keyword">of</span> <span class="type">void</span>.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>getMethodInfo(methodDetailsCache, method)</code>：方法里面进去后会解析执行类型。根据接口返回值类型判断是否符合 <code>rx.Observable</code> 方式，如果符合则 HTTP 请求会走对应的 Observable 方式。根据接口参数是否带 Callback 类型参数判断 HTTP 请求是否走异步调用，如果无则走同步调用。</li>
<li><code>invokeRequest(requestInterceptor, methodInfo, args);</code>：解析 Retrofit Annotation 注解，组装网络请求报文，发起网络请求。</li>
</ul>
<p>下面贴一下 invokeRequest 方法的源码：</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span><br><span class="line">     * Execute an HTTP request.</span><br><span class="line">     *</span><br><span class="line">     * @return HTTP response object of specified &#123;@code type&#125; or &#123;@code null&#125;.</span><br><span class="line">     * @throws RetrofitError if any error occurs during the HTTP request.</span><br><span class="line">     */</span></span><br><span class="line">    private Object invokeRequest<span class="params">(RequestInterceptor requestInterceptor, RestMethodInfo methodInfo,</span><br><span class="line">                                 Object[] args)</span> &#123;</span><br><span class="line">        String url = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            methodInfo.init<span class="params">()</span>; <span class="comment">// Ensure all relevant method information has been loaded.</span></span><br><span class="line"></span><br><span class="line">            String serverUrl = server.getUrl<span class="params">()</span>;</span><br><span class="line">            RequestBuilder requestBuilder = new RequestBuilder<span class="params">(serverUrl, methodInfo, converter)</span>;</span><br><span class="line">            requestBuilder.setArguments<span class="params">(args)</span>;</span><br><span class="line"></span><br><span class="line">            requestInterceptor.intercept<span class="params">(requestBuilder)</span>;</span><br><span class="line"></span><br><span class="line">            Request request = requestBuilder.build<span class="params">()</span>;</span><br><span class="line">            url = request.getUrl<span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="params">(!methodInfo.isSynchronous)</span> &#123;</span><br><span class="line">                <span class="comment">// If we are executing asynchronously then update the current thread with a useful name.</span></span><br><span class="line">                int substrEnd = url.indexOf<span class="params">(<span class="string">"?"</span>, serverUrl.length<span class="params">()</span>)</span>;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(substrEnd == -<span class="number">1</span>)</span> &#123;</span><br><span class="line">                    substrEnd = url.length<span class="params">()</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Thread.currentThread<span class="params">()</span>.setName<span class="params">(THREAD_PREFIX</span><br><span class="line">                        + url.substring<span class="params">(serverUrl.length<span class="params">()</span>, substrEnd)</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="params">(logLevel.log<span class="params">()</span>)</span> &#123;</span><br><span class="line">                <span class="comment">// Log the request data.</span></span><br><span class="line">                request = logAndReplaceRequest<span class="params">(<span class="string">"HTTP"</span>, request, args)</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Object profilerObject = null;</span><br><span class="line">            <span class="keyword">if</span> <span class="params">(profiler != null)</span> &#123;</span><br><span class="line">                profilerObject = profiler.beforeCall<span class="params">()</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            long start = System.nanoTime<span class="params">()</span>;</span><br><span class="line">            Response response = clientProvider.get<span class="params">()</span>.execute<span class="params">(request)</span>;</span><br><span class="line">            long elapsedTime = TimeUnit.NANOSECONDS.toMillis<span class="params">(System.nanoTime<span class="params">()</span> - start)</span>;</span><br><span class="line"></span><br><span class="line">            int statusCode = response.getStatus<span class="params">()</span>;</span><br><span class="line">            <span class="keyword">if</span> <span class="params">(profiler != null)</span> &#123;</span><br><span class="line">                RequestInformation requestInfo = getRequestInfo<span class="params">(serverUrl, methodInfo, request)</span>;</span><br><span class="line">                <span class="comment">//noinspection unchecked</span></span><br><span class="line">                profiler.afterCall<span class="params">(requestInfo, elapsedTime, statusCode, profilerObject)</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="params">(logLevel.log<span class="params">()</span>)</span> &#123;</span><br><span class="line">                <span class="comment">// Log the response data.</span></span><br><span class="line">                response = logAndReplaceResponse<span class="params">(url, response, elapsedTime)</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Type type = methodInfo.responseObjectType;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="params">(statusCode &gt;= <span class="number">200</span> &amp;&amp; statusCode &lt; <span class="number">300</span>)</span> &#123; <span class="comment">// 2XX == successful request</span></span><br><span class="line">                <span class="comment">// Caller requested the raw Response object directly.</span></span><br><span class="line">                <span class="keyword">if</span> <span class="params">(type.equals<span class="params">(Response.class)</span>)</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="params">(!methodInfo.isStreaming)</span> &#123;</span><br><span class="line">                        <span class="comment">// Read the entire stream and replace with one backed by a byte[].</span></span><br><span class="line">                        response = Utils.readBodyToBytesIfNecessary<span class="params">(response)</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> <span class="params">(methodInfo.isSynchronous)</span> &#123;</span><br><span class="line">                        return response;</span><br><span class="line">                    &#125;</span><br><span class="line">                    return new ResponseWrapper<span class="params">(response, response)</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                TypedInput body = response.getBody<span class="params">()</span>;</span><br><span class="line">                <span class="keyword">if</span> <span class="params">(body == null)</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> <span class="params">(methodInfo.isSynchronous)</span> &#123;</span><br><span class="line">                        return null;</span><br><span class="line">                    &#125;</span><br><span class="line">                    return new ResponseWrapper<span class="params">(response, null)</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                ExceptionCatchingTypedInput wrapped = new ExceptionCatchingTypedInput<span class="params">(body)</span>;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Object convert = converter.fromBody<span class="params">(wrapped, type)</span>;</span><br><span class="line">                    logResponseBody<span class="params">(body, convert)</span>;</span><br><span class="line">                    <span class="keyword">if</span> <span class="params">(methodInfo.isSynchronous)</span> &#123;</span><br><span class="line">                        return convert;</span><br><span class="line">                    &#125;</span><br><span class="line">                    return new ResponseWrapper<span class="params">(response, convert)</span>;</span><br><span class="line">                &#125; catch <span class="params">(ConversionException e)</span> &#123;</span><br><span class="line">                    <span class="comment">// If the underlying input stream threw an exception, propagate that rather than</span></span><br><span class="line">                    <span class="comment">// indicating that it was a conversion exception.</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="params">(wrapped.threwException<span class="params">()</span>)</span> &#123;</span><br><span class="line">                        throw wrapped.getThrownException<span class="params">()</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// The response body was partially read by the converter. Replace it with null.</span></span><br><span class="line">                    response = Utils.replaceResponseBody<span class="params">(response, null)</span>;</span><br><span class="line"></span><br><span class="line">                    throw RetrofitError.conversionError<span class="params">(url, response, converter, type, e)</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            response = Utils.readBodyToBytesIfNecessary<span class="params">(response)</span>;</span><br><span class="line">            throw RetrofitError.httpError<span class="params">(url, response, converter, type)</span>;</span><br><span class="line">        &#125; catch <span class="params">(RetrofitError e)</span> &#123;</span><br><span class="line">            throw e; <span class="comment">// Pass through our own errors.</span></span><br><span class="line">        &#125; catch <span class="params">(IOException e)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="params">(logLevel.log<span class="params">()</span>)</span> &#123;</span><br><span class="line">                logException<span class="params">(e, url)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            throw RetrofitError.networkError<span class="params">(url, e)</span>;</span><br><span class="line">        &#125; catch <span class="params">(Throwable t)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="params">(logLevel.log<span class="params">()</span>)</span> &#123;</span><br><span class="line">                logException<span class="params">(t, url)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            throw RetrofitError.unexpectedError<span class="params">(url, t)</span>;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="params">(!methodInfo.isSynchronous)</span> &#123;</span><br><span class="line">                Thread.currentThread<span class="params">()</span>.setName<span class="params">(IDLE_THREAD_NAME)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总的来说 Retrofit 源码不算多，注解 + 动态代理、HTTP 异步请求、模块化数据转为 Java 对象的实现很棒。</p>
]]></content>
    <summary type="html">
    <![CDATA[Retrofit 源码解析]]>
    
    </summary>
    
      <category term="Android" scheme="http://tigerforest.github.io/tags/Android/"/>
    
      <category term="Java" scheme="http://tigerforest.github.io/tags/Java/"/>
    
      <category term="源码解析" scheme="http://tigerforest.github.io/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
</feed>