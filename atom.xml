<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Tiger Forest]]></title>
  <subtitle><![CDATA[Nowhere else that I belong than here with you]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://tigerforest.github.io//"/>
  <updated>2019-08-12T14:53:50.782Z</updated>
  <id>http://tigerforest.github.io//</id>
  
  <author>
    <name><![CDATA[Tigerforest]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[上海我们还会再见]]></title>
    <link href="http://tigerforest.github.io/2019/08/12/backcs/"/>
    <id>http://tigerforest.github.io/2019/08/12/backcs/</id>
    <published>2019-08-12T13:23:00.000Z</published>
    <updated>2019-08-12T14:53:50.782Z</updated>
    <content type="html"><![CDATA[<p>我回到了长沙。</p>
<p>从2010年到2019年我在上海工作已经满9年，我很早之前就在考虑回长沙的事情。想回来的原因之一是房子买在长沙，住自己房子是我的一大心愿。</p>
<p>2015年我在为两件事情做准备，第一件是到长沙买房，第二件是出去旅游。我当时未婚，在上海买房属于限购人群，所以直接考虑买在长沙。在网上查看了所有自己想了解到的资料，还咨询了一些有经验的同事，选定了自己想去看的一个楼盘。借着回老家办护照的时间，直奔楼盘。我所关注的是楼盘周边的环境和户型，这两样我需要去楼盘现场看看。当天销售带我看了样板房，户型我很满意，然后销售帮我计算了一下首付情况，我就回老家县城办护照和凑钱去了。返回上海前在长沙停留了一天，交了首付款。可以说在下一年收房后，回长沙的想法就已经在我的心里萌芽了。</p>
<p>我了解到很多在外地工作的朋友，都有我这样的想法。都是房子已经买在长沙，想把工作换到长沙。其实长沙的工作环境还远没有想象中的那么好，我找工作两周差点就奔溃了，对口的岗位不多，薪资低，有些公司明确实行大小周。在我了解到长沙的行情后，我接受了心里和现实的偏差，最后顺利谈妥了一份工作。</p>
<p>我回长沙快一个半月了，现在的长沙除了热其他都好。我家背靠山，前靠湖，环境很好。长沙的食物很合我的口味，大街小巷遍地的米粉店都是我的最爱。</p>
<p>我选择了长沙，对自己在长沙接下来的生活充满期待。</p>
<p>我会在长沙怀念上海，上海我们还会再见。</p>
]]></content>
    <summary type="html">
    <![CDATA[上海我们还会再见]]>
    
    </summary>
    
      <category term="长沙" scheme="http://tigerforest.github.io/tags/%E9%95%BF%E6%B2%99/"/>
    
      <category term="长沙" scheme="http://tigerforest.github.io/categories/%E9%95%BF%E6%B2%99/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[理解 Lex & Yacc]]></title>
    <link href="http://tigerforest.github.io/2018/11/24/goyacc/"/>
    <id>http://tigerforest.github.io/2018/11/24/goyacc/</id>
    <published>2018-11-24T00:42:00.000Z</published>
    <updated>2018-11-26T05:22:25.261Z</updated>
    <content type="html"><![CDATA[<p>最近在学习一款 NewSQL 数据库 TiDB，TiDB 使用 Lex &amp; Yacc 方式实现了对 SQL 语句的解析。</p>
<h3 id="Lex_&amp;_Yacc">Lex &amp; Yacc</h3><p><a href="http://dinosaur.compilertools.net" target="_blank" rel="noopener">Lex &amp; Yacc</a> 分别是用来生成词法分析器和语法分析器的工具。</p>
<p><img src="/img/CompilationSequence.png" width="510px" title="编译流程"></p>
<p>上图是使用 Lex &amp; Yacc 解析 a = b + c * d 这段代码的流程。Lex 根据已定义的 patterns 生成词法分析器，将上面的代码解析为 id1 = id2 + id3 * id4 的 tokens。Yacc 根据已定义的 grammer 生成语法分析器，语法分析器以 Lex 输出的 tokens 作为输入，将 tokens 解析为语法树，最后对语法树进行遍历输出结果。</p>
<p>如果我们想要定义一个新的程序语言，可以使用 Lex &amp; Yacc 的方式完成语法分析，然后再编写语法树执行部分就完成了。</p>
<h3 id="Goyacc">Goyacc</h3><p><a href="https://godoc.org/golang.org/x/tools/cmd/goyacc" target="_blank" rel="noopener">Goyacc</a> 是 Go 语言版本的 Yacc。根据 Goyacc 的文档我们可以自己手写词法分析器，也就是手写 Lex 部分的实现，然后实现 Goyacc 的 yyLexer 接口就能得到想要的语法树，TiDB 正是这样做的。</p>
<pre><code>type yyLexer interface {
    Lex(lval *yySymType) int
    Error(e string)
}
</code></pre><h3 id="计算器例子">计算器例子</h3><p>我找到了一个使用 Goyacc 实现计算器的例子 <a href="https://github.com/draftcode/goyacc_sample" target="_blank" rel="noopener">goyacc_sample</a> 。但是只有代码没有其他说明，我希望我可以解释一下这个程序是怎么执行的。</p>
<p>goyacc_sample 将需要被解析执行的代码存放在 <a href="https://github.com/draftcode/goyacc_sample/blob/master/sample.calc" target="_blank" rel="noopener">sample.calc</a> 文件中，内容：</p>
<pre><code>var a = 123;
var b = a + 1;
a * (b + 2 * a);
</code></pre><p>运行主程序 calc.go ：</p>
<pre><code>go run calc.go sample.calc
</code></pre><p>输出结果：</p>
<pre><code>Assign 123 to a
Assign 124 to b
45510
</code></pre><p>可以看到 calc.go 程序执行了 sample.calc 里面的代码，并计算出了正确的结果。</p>
<p><a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go" target="_blank" rel="noopener">lexer.go</a> 是词法分析器实现。其中 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go#L17" target="_blank" rel="noopener">Scanner</a> 存储 sample.calc 文件中的所有字符，<a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go#L28" target="_blank" rel="noopener">Scan()</a> 方法逐字读取解析并返回 Goyacc 需要的 tokens。<a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go#L12" target="_blank" rel="noopener">Position</a> 存储字符读取的位置，<a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go#L28" target="_blank" rel="noopener">Scan()</a> 会将 token 和当前已读取到的位置一起返回。<a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go#L8" target="_blank" rel="noopener">keywords</a> 限定了 <code>var</code> 字符，声明一个变量只允许使用 <code>var</code> 字符。</p>
<p>重点关注 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go#L28" target="_blank" rel="noopener">Scan()</a> 方法：</p>
<pre><code>func (s *Scanner) Scan() (tok int, lit string, pos Position) {
    s.skipWhiteSpace()
    pos = s.position()
    switch ch := s.peek(); {
    case isLetter(ch):
        lit = s.scanIdentifier()
        if keyword, ok := keywords[lit]; ok {
            tok = keyword
        } else {
            tok = IDENT
        }
    case isDigit(ch):
        tok, lit = NUMBER, s.scanNumber()
    default:
        switch ch {
        case -1:
            tok = EOF
        case &#39;(&#39;, &#39;)&#39;, &#39;;&#39;, &#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;/&#39;, &#39;%&#39;, &#39;=&#39;:
            tok = int(ch)
            lit = string(ch)
        }
        s.next()
    }
    return
}
</code></pre><p>这里可以看到返回的 tok 是 int 类型，是一个唯一的数字，IDENT、NUMBER、VAR 的值是多少暂时不用关注。EOF 的值为 -1 代表结束，tok 的值还有这些符号 <code>(</code>、<code>)</code>、 <code>;</code>、 <code>+</code>、 <code>-</code>、 <code>*</code>、 <code>/</code>、 <code>%</code>、 <code>=</code> 转换成 int 后的值。</p>
<p>另外，<a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go#L17" target="_blank" rel="noopener">Scanner</a> 的 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go#L100" target="_blank" rel="noopener">scanIdentifier()</a> 的方法依次读取以字母和下划线开头的字符，并可以包含 [0-9] 的整数数字，直到读取到非字母、下划线、[0-9] 的整数即结束。<a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go#L109" target="_blank" rel="noopener">scanNumber()</a> 读取 [0-9] 的整数数字，直到非 [0-9]的整数数字即结束。</p>
<p><a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go#L17" target="_blank" rel="noopener">Scanner</a> 处理 <code>var a = 123;</code> 这样一段字符代码，我们以下 tokens:</p>
<pre><code>tok: VAR,    lit: &quot;var&quot;,  {Line: 1, Column: 1}
tok: IDENT,  lit: &quot;a&quot;,    {Line: 1, Column: 5}
tok: 61,     lit: &quot;=&quot;,    {Line: 1, Column: 7}
tok: NUMBER, lit: &quot;123&quot;,  {Line: 1, Column: 9}
tok: 59,     lit: &quot;;&quot;,    {Line: 1, Column: 12}
</code></pre><p><a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go" target="_blank" rel="noopener">lexer.go</a> 对输入的字符做了限制，词法分析器的作用就是规定能够识别的字符，然后为语法分析器提取 tokens。</p>
<p><a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/ast.go" target="_blank" rel="noopener">ast.go</a> （Abstract Syntax Tree）定义了语法树的组成。<a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go" target="_blank" rel="noopener">parser.go</a> 是语法解析实现，这个文件是用 Goyacc 工具生成的，同时生成的文件还有 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.output" target="_blank" rel="noopener">parser.output</a>。生成文件的命令在 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/Makefile" target="_blank" rel="noopener">Makefile</a> 中：</p>
<pre><code>go tool yacc -o parser.go -v parser.output parser.go.y
</code></pre><p>这段命令在 go 1.8 或者更高版本无法执行，因为 go 1.8 移除了 yacc 工具，可以使用 Goyacc：</p>
<pre><code>goyacc -o parser.go -v parser.output parser.go.y
</code></pre><p><a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go" target="_blank" rel="noopener">parser.go</a> 和 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.output" target="_blank" rel="noopener">parser.output</a> 都是根据 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go.y" target="_blank" rel="noopener">parser.go.y</a> 文件生成的。前面我们说过 Yacc 根据已定义的 grammer 生成语法分析器，<a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go.y" target="_blank" rel="noopener">parser.go.y</a> 为我们定义的语法文件，<a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go" target="_blank" rel="noopener">parser.go</a> 即为语法分析器实现。</p>
<p>Yacc 语法文件分为 3 个部分，以两个相临 %% 隔开，Goyacc 语法文件遵循同样的定义。</p>
<pre><code>声明
%%
规则
%%
程序
</code></pre><p>下面这些都是 Yacc 语法文件关键字，只列出了需要用到的：</p>
<pre><code>%union /* 将 yacc 值堆栈标识为所需值的各种不同类型的并集 */
%type /* 标识非终止符的类型 */
%token /* 标识 yacc 命令接受的标记名称 */
%left /* 标识与其他标记左关联的标记 */
%right /* 标识与其他标记右关联的标记 */
</code></pre><p><a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go.y" target="_blank" rel="noopener">parser.go.y</a> 的声明部分引入 go 代码定义了 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go.y#L9" target="_blank" rel="noopener">Token</a> 结构，有三个属性，正好就是 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go#L17" target="_blank" rel="noopener">Scanner</a> 的 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go#L28" target="_blank" rel="noopener">Scan()</a> 方法输出的结果。Goyacc 会根据 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go.y#L17" target="_blank" rel="noopener">%union</a> 中的定义来生成 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go#L19" target="_blank" rel="noopener">yySymType</a> 结构，<a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go#L19" target="_blank" rel="noopener">yySymType</a> 主要作用是获取当前解析到的字符串对象。<a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go.y#L24" target="_blank" rel="noopener">%type&lt;statements&gt; statements</a> 尖括号中的 <code>statements</code> 实际上是 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go.y#L17" target="_blank" rel="noopener">%union</a> 中的 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go.y#L18" target="_blank" rel="noopener">statements</a>，类型是 <code>[]Statement</code>，而 <code>Statement</code> 是在 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/ast.go" target="_blank" rel="noopener">ast.go</a> 中定义的。所以 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go.y#L24" target="_blank" rel="noopener">%type&lt;statements&gt; statements</a> 就是定义了一个名为 statements，类型为 ast.Statement 数组的标记。后面几个 %type 和 %token 都可以这么理解。<code>%left</code> 左关联标记，表示表达式的左边部分，需要再加上 lexer.go 产生的一个 token 构成右边部分，才可以组成一个完整的表达式。这里 <code>%left</code> 指定了运算符 <code>*</code>、 <code>/</code> 和 <code>%</code> 的优先级高于 <code>+</code> 和 <code>-</code>。在 yacc 中后面定义的行优先级会高于前面的行，<a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go.y#L32" target="_blank" rel="noopener">%right UNARY</a> 是处理负数的标记，优先级最高。</p>
<p>规则部分语法使用了 BNF 范式，主要分析一下下面的代码：</p>
<pre><code>expr: NUMBER
    {
        $$ = &amp;NumberExpression{Lit: $1.lit}
    }
    | IDENT
    {
        $$ = &amp;IdentifierExpression{Lit: $1.lit}
    }
    | &#39;-&#39; expr      %prec UNARY
    {
        $$ = &amp;UnaryMinusExpression{SubExpr: $2}
    }
    | &#39;(&#39; expr &#39;)&#39;
    {
        $$ = &amp;ParenExpression{SubExpr: $2}
    }
    | expr &#39;+&#39; expr
    { $$ = &amp;BinOpExpression{LHS: $1, Operator: int(&#39;+&#39;), RHS: $3} }
    | expr &#39;-&#39; expr
    { $$ = &amp;BinOpExpression{LHS: $1, Operator: int(&#39;-&#39;), RHS: $3} }
    | expr &#39;*&#39; expr
    { $$ = &amp;BinOpExpression{LHS: $1, Operator: int(&#39;*&#39;), RHS: $3} }
    | expr &#39;/&#39; expr
    { $$ = &amp;BinOpExpression{LHS: $1, Operator: int(&#39;/&#39;), RHS: $3} }
    | expr &#39;%&#39; expr
    { $$ = &amp;BinOpExpression{LHS: $1, Operator: int(&#39;%&#39;), RHS: $3} }
</code></pre><p>假如我们现在解析字符串 <code>123</code>，通过 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/lexer.go" target="_blank" rel="noopener">lexer.go</a> 处理我们能得到：</p>
<pre><code> tok: NUMBER, lit: &#39;123&#39;,  {Line: 1, Column: 1}
</code></pre><p>可以匹配第一条规则，得到 <code>&amp;NumberExpression{Lit: &quot;123&quot;}</code>。规则部分竖杆当作 “或” 来理解就可以了。</p>
<p>程序部分 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go.y#L91" target="_blank" rel="noopener">LexerWrapper</a> 实现了 Goyacc 的 yyLexer 接口，然后定义了语法解析器的入口 <a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/parser.go.y#L114" target="_blank" rel="noopener">Parse(s *Scanner)</a>，该方法返回结果就是语法树数组。</p>
<p><a href="https://github.com/draftcode/goyacc_sample/blob/master/calc/evaluator.go" target="_blank" rel="noopener">evaluator.go</a> 递归遍历执行语法树得到结果。</p>
<p><a href="https://github.com/draftcode/goyacc_sample" target="_blank" rel="noopener">goyacc_sample</a> 是一个完整的 Lex &amp; Yacc 实现例子，配合作者写的单元测试能够更好的理解。</p>
<p>输入：</p>
<pre><code>VAR abc;
</code></pre><p>输出：</p>
<pre><code>Line 1, Column 5: &quot;abc&quot; syntax error
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[goyacc]]>
    
    </summary>
    
      <category term="goyacc" scheme="http://tigerforest.github.io/tags/goyacc/"/>
    
      <category term="goyacc" scheme="http://tigerforest.github.io/categories/goyacc/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[感谢支持]]></title>
    <link href="http://tigerforest.github.io/2016/01/14/thank/"/>
    <id>http://tigerforest.github.io/2016/01/14/thank/</id>
    <published>2016-01-14T11:28:45.000Z</published>
    <updated>2016-04-15T06:28:55.000Z</updated>
    <content type="html"><![CDATA[<p>感谢 Crazy uncle。</p>
]]></content>
    <summary type="html">
    <![CDATA[感谢]]>
    
    </summary>
    
      <category term="日志" scheme="http://tigerforest.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="日志" scheme="http://tigerforest.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[上海申请英国个人旅游签证分享]]></title>
    <link href="http://tigerforest.github.io/2015/07/30/UKVisa/"/>
    <id>http://tigerforest.github.io/2015/07/30/UKVisa/</id>
    <published>2015-07-29T20:30:00.000Z</published>
    <updated>2018-11-25T11:29:29.135Z</updated>
    <content type="html"><![CDATA[<p>已删除</p>
<h2 id="附录">附录</h2><ul>
<li><a href="https://www.gov.uk/government/publications/apply-for-a-uk-visa-in-china/--2" target="_blank" rel="noopener">英国签证申请流程</a></li>
<li><a href="https://www.visa4uk.fco.gov.uk/home/welcome" target="_blank" rel="noopener">英国签证在线申请材料账号注册</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[英国旅游签证申请]]>
    
    </summary>
    
      <category term="Visa" scheme="http://tigerforest.github.io/tags/Visa/"/>
    
      <category term="旅游" scheme="http://tigerforest.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
      <category term="旅游" scheme="http://tigerforest.github.io/categories/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mockito+Spring 集成单元测试]]></title>
    <link href="http://tigerforest.github.io/2015/07/13/mockito/"/>
    <id>http://tigerforest.github.io/2015/07/13/mockito/</id>
    <published>2015-07-13T01:49:45.000Z</published>
    <updated>2018-11-25T11:28:57.080Z</updated>
    <content type="html"><![CDATA[<p>已删除</p>
<h2 id="附录">附录</h2><ul>
<li><a href="http://liuzhijun.iteye.com/blog/1512780" target="_blank" rel="noopener">Mockito 是什么?</a></li>
<li><a href="http://www.cnblogs.com/syxchina/p/4150879.html" target="_blank" rel="noopener">spring中使用mockito</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[Mockito+Spring 集成单元测试]]>
    
    </summary>
    
      <category term="Mockito" scheme="http://tigerforest.github.io/tags/Mockito/"/>
    
      <category term="Spring" scheme="http://tigerforest.github.io/tags/Spring/"/>
    
      <category term="单元测试" scheme="http://tigerforest.github.io/categories/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Retrofit 源码解析]]></title>
    <link href="http://tigerforest.github.io/2015/07/09/retrofit/"/>
    <id>http://tigerforest.github.io/2015/07/09/retrofit/</id>
    <published>2015-07-09T15:20:45.000Z</published>
    <updated>2018-11-25T11:29:05.000Z</updated>
    <content type="html"><![CDATA[<p>已删除</p>
<p><a href="http://square.github.io/retrofit/" target="_blank" rel="noopener">A type-safe REST client for Android and Java</a></p>
]]></content>
    <summary type="html">
    <![CDATA[Retrofit 源码解析]]>
    
    </summary>
    
      <category term="Android" scheme="http://tigerforest.github.io/tags/Android/"/>
    
      <category term="Java" scheme="http://tigerforest.github.io/tags/Java/"/>
    
      <category term="源码解析" scheme="http://tigerforest.github.io/categories/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
</feed>